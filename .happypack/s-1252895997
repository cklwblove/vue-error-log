import _JSON$stringify from 'babel-runtime/core-js/json/stringify';
import Raven from 'raven-js';

var isOBJByType = function isOBJByType(o, type) {
  return Object.prototype.toString.call(o) === '[object ' + (type || 'Object') + ']';
};

var processStackMsg = function processStackMsg(error) {
  var stack = error.stack.replace(/\n/gi, '').replace(/\bat\b/gi, '@').split('@').slice(0, 10).map(function (v) {
    return v.replace(/^\s*|\s*$/g, '');
  }).join('~').replace(/\?[^:]+/gi, '');
  var msg = error.toString();
  if (stack.indexOf(msg) < 0) {
    stack = msg + '@' + stack;
  }

  return stack;
};

var processError = function processError(errObj) {
  try {
    if (errObj.stack) {
      var url = errObj.stack.match('https?://[^\n]+');
      url = url ? url[0] : '';
      var rowCols = url.match(':(\\d+):(\\d+)');
      if (!rowCols) {
        rowCols = [0, 0, 0];
      }

      var stack = processStackMsg(errObj);

      if (isOBJByType(stack, 'Event')) {
        stack += stack.type ? '--' + stack.type + '--' + (stack.target ? stack.target.tagName + '::' + stack.target.src : '') : '';
      }

      return {
        msg: stack,
        rowNum: rowCols[1],
        colNum: rowCols[2],
        target: url.replace(rowCols[0], ''),
        _orgMsg: errObj.toString()
      };
    } else {
      if (errObj.name && errObj.message && errObj.description) {
        return {
          msg: _JSON$stringify(errObj)
        };
      }
      return errObj;
    }
  } catch (err) {
    return errObj;
  }
};

window.onerror = function (msg, url, line, col, error) {
  console.log(msg + '--' + url + '--' + line + '--' + col + '--' + error);

  if (msg !== 'Script error.' && !url) {
    return true;
  }

  setTimeout(function () {
    console.log('windowï¼š' + processError(error));

    Raven.captureException(processError(error), {
      level: 'error',
      tags: { svn_commit: 'window' }
    });
  }, 0);
  return true;
};