{"version":3,"sources":["src/globalLog.js"],"names":["Raven","isOBJByType","o","type","Object","prototype","toString","call","processStackMsg","error","stack","replace","split","slice","map","v","join","msg","indexOf","processError","errObj","url","match","rowCols","target","tagName","src","rowNum","colNum","_orgMsg","name","message","description","err","window","onerror","line","col","console","log","setTimeout","captureException","level","tags","svn_commit"],"mappings":"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","file":"globalLog.js","sourceRoot":"/Users/liwb/Desktop/liwb_work/cloud/vue-error-log","sourcesContent":["import Raven from 'raven-js';\n\nconst isOBJByType = (o, type) => {\n  return Object.prototype.toString.call(o) === '[object ' + (type || 'Object') + ']';\n}\n\nconst processStackMsg = (error) => {\n  var stack = error.stack\n    .replace(/\\n/gi, '')            // 去掉换行，节省传输内容大小\n    .replace(/\\bat\\b/gi, '@')       // chrome中是at，ff中是@\n    .split('@')                     // 以@分割信息\n    .slice(0, 10)                   // 最大堆栈长度（Error.stackTraceLimit = 10），所以只取前10条\n    .map((v) => v.replace(/^\\s*|\\s*$/g, ''))  // 去除多余空格\n    .join('~')                      // 手动添加分隔符，便于后期展示\n    .replace(/\\?[^:]+/gi, '');      // 去除js文件链接的多余参数(?x=1之类)\n  var msg = error.toString();\n  if (stack.indexOf(msg) < 0) {\n    stack = msg + '@' + stack;\n  }\n\n  return stack;\n}\n\nconst processError = (errObj) => {\n  try {\n    // PC端：ie10 & safari6 才支持stack，\n    // 移动端：Android Browser4 && Safari Mobile6 才支持stack。\n    if (errObj.stack) {\n      var url = errObj.stack.match('https?://[^\\n]+');\n      url = url ? url[0] : '';\n      var rowCols = url.match(':(\\\\d+):(\\\\d+)');\n      if (!rowCols) {\n        rowCols = [0, 0, 0];\n      }\n\n      var stack = processStackMsg(errObj);\n\n      if (isOBJByType(stack, 'Event')) {\n        stack += stack.type ? ('--' + stack.type + '--' + (stack.target ? (stack.target.tagName + '::' + stack.target.src) : '')) : '';\n      }\n\n      return {\n        msg: stack,\n        rowNum: rowCols[1],\n        colNum: rowCols[2],\n        target: url.replace(rowCols[0], ''),\n        _orgMsg: errObj.toString()\n      };\n    } else {\n      // ie 独有 error 对象信息，try-catch 捕获到错误信息传过来，造成没有msg\n      if (errObj.name && errObj.message && errObj.description) {\n        return {\n          msg: JSON.stringify(errObj)\n        };\n      }\n      return errObj;\n    }\n  } catch (err) {\n    return errObj;\n  }\n}\n/**\n * 重写window.onerror 用于捕获全局\n * @param msg\n * @param url\n * @param line\n * @param col\n * @param error\n * @returns {boolean}\n */\nwindow.onerror = function (msg, url, line, col, error) {\n  console.log(msg + '--' + url + '--' + line + '--' + col + '--' + error);\n  // 没有URL不上报！上报也不知道错误\n  if (msg !== 'Script error.' && !url) {\n    return true;\n  }\n\n  // 采用异步的方式\n  // 我遇到过在window.onunload进行ajax的堵塞上报\n  // 由于客户端强制关闭webview导致这次堵塞上报有Network Error\n  // 我猜测这里window.onerror的执行流在关闭前是必然执行的\n  // 而离开文章之后的上报对于业务来说是可丢失的\n  // 所以我把这里的执行流放到异步事件去执行\n  // 脚本的异常数降低了10倍\n  setTimeout(function () {\n    console.log('window：' + processError(error));\n    // 把data上报到后台！\n    Raven.captureException(processError(error), {\n      level: 'error',\n      tags: {svn_commit: 'window'}\n    });\n  }, 0);\n  return true;\n};\n"]}